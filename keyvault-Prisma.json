{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.18.4.5664",
      "templateHash": "6426194241753403757"
    }
  },
  "parameters": {
    "tags": {
      "type": "object",
      "metadata": {
        "description": "Tags that will be applied to all resource provisioned in this Bicep file."
      }
    },
    "keyVaults": {
      "type": "array",
      "metadata": {
        "description": "Key Vault parameters used across Bicep file."
      }
    }
  },
  "resources": [
    {
      "copy": {
        "name": "keyvaultModule",
        "count": "[length(parameters('keyVaults'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[parameters('keyVaults')[copyIndex()].name]",
      "resourceGroup": "[parameters('keyVaults')[copyIndex()].resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyvaultName": {
            "value": "[parameters('keyVaults')[copyIndex()].name]"
          },
          "location": {
            "value": "[parameters('keyVaults')[copyIndex()].location]"
          },
          "tags": {
            "value": "[union(parameters('tags'), parameters('keyVaults')[copyIndex()].tags)]"
          },
          "enableRbacAuthorization": {
            "value": "[parameters('keyVaults')[copyIndex()].enableRbacAuthorization]"
          },
          "enabledForTemplateDeployment": {
            "value": "[parameters('keyVaults')[copyIndex()].enabledForTemplateDeployment]"
          },
          "networkRuleBypass": {
            "value": "[parameters('keyVaults')[copyIndex()].networkRuleBypass]"
          },
          "enableSoftDelete": {
            "value": "[parameters('keyVaults')[copyIndex()].enableSoftDelete]"
          },
          "softDeleteRetentionInDays": {
            "value": "[parameters('keyVaults')[copyIndex()].softDeleteRetentionInDays]"
          },
          "enablePurgeProtection": {
            "value": "[parameters('keyVaults')[copyIndex()].enablePurgeProtection]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.18.4.5664",
              "templateHash": "16041804477450667619"
            }
          },
          "parameters": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "KeyVault Name"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location - Azure Region"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "Sku"
              }
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[tenant().tenantId]",
              "metadata": {
                "description": "Tenant ID"
              }
            },
            "allowedIps": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Allowed IP Addresses"
              }
            },
            "allowedVnetIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Allowed VNet IDs"
              }
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enabled for Deployment"
              }
            },
            "enabledForDiskEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enabled for Disk Encryption"
              }
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enabled for Template Deployment"
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable Purge Protection"
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable Soft Delete"
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "metadata": {
                "description": "Number of retention days. It accepts >=7 and <=90."
              }
            },
            "enableRbacAuthorization": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC."
              }
            },
            "networkRuleBypass": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "AzureServices"
              ],
              "metadata": {
                "description": "Network Rule Bypass settings"
              }
            },
            "networkRuleDefaultAction": {
              "type": "string",
              "defaultValue": "Deny",
              "allowedValues": [
                "Allow",
                "Deny"
              ],
              "metadata": {
                "description": "Network Rule Default Action"
              }
            },
            "accessPolicies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "and Access Policies"
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "disabled",
              "metadata": {
                "description": "and Access Policies"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyvaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "accessPolicies",
                    "count": "[length(parameters('accessPolicies'))]",
                    "input": {
                      "tenantId": "[parameters('tenantId')]",
                      "objectId": "[parameters('accessPolicies')[copyIndex('accessPolicies')].objectId]",
                      "permissions": {
                        "keys": "[parameters('accessPolicies')[copyIndex('accessPolicies')].keys]",
                        "secrets": "[parameters('accessPolicies')[copyIndex('accessPolicies')].secrets]",
                        "storage": "[parameters('accessPolicies')[copyIndex('accessPolicies')].storage]",
                        "certificates": "[parameters('accessPolicies')[copyIndex('accessPolicies')].certificates]"
                      }
                    }
                  }
                ],
                "tenantId": "[parameters('tenantId')]",
                "sku": {
                  "family": "A",
                  "name": "[parameters('sku')]"
                },
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), true(), null())]",
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkAcls": {
                  "copy": [
                    {
                      "name": "virtualNetworkRules",
                      "count": "[length(parameters('allowedVnetIds'))]",
                      "input": {
                        "id": "[parameters('allowedVnetIds')[copyIndex('virtualNetworkRules')]]"
                      }
                    },
                    {
                      "name": "ipRules",
                      "count": "[length(parameters('allowedIps'))]",
                      "input": {
                        "value": "[parameters('allowedIps')[copyIndex('ipRules')]]"
                      }
                    }
                  ],
                  "bypass": "[parameters('networkRuleBypass')]",
                  "defaultAction": "[parameters('networkRuleDefaultAction')]"
                }
              },
              "metadata": {
                "description": "Provision a Key Vault"
              }
            }
          ],
          "outputs": {
            "keyvaultProperties": {
              "type": "object",
              "metadata": {
                "description": "Output: Key Vault properties"
              },
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName')), '2022-07-01')]"
            },
            "keyvaultRbacAuth": {
              "type": "bool",
              "metadata": {
                "description": "Output: Key Vault property: enableRbacAuthorization"
              },
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName')), '2022-07-01').enableRbacAuthorization]"
            },
            "keyVaultResourceId": {
              "type": "string",
              "metadata": {
                "description": "Output: Key Vault property: identity"
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Output: Key Vault property: name"
              },
              "value": "[parameters('keyvaultName')]"
            }
          }
        }
      },
      "metadata": {
        "description": "Provision many Key Vaults."
      }
    }
  ]
}